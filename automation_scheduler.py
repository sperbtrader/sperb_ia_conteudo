#!/usr/bin/env python3
"""
Agendador de Automa√ß√£o para Day Trade Content
Executa o gerador de conte√∫do em intervalos regulares
"""

import schedule
import time
import subprocess
import os
import logging
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('automation.log'),
        logging.StreamHandler()
    ]
)

class AutomationScheduler:
    def __init__(self):
        self.script_path = '/home/ubuntu/day_trade_generator.py'
        self.content_dir = '/home/ubuntu/generated_content'
        
        # Cria diret√≥rio para conte√∫do gerado
        os.makedirs(self.content_dir, exist_ok=True)
    
    def run_content_generator(self):
        """Executa o gerador de conte√∫do"""
        try:
            logging.info("üöÄ Iniciando gera√ß√£o de conte√∫do...")
            
            # Muda para o diret√≥rio de conte√∫do
            os.chdir(self.content_dir)
            
            # Executa o script
            result = subprocess.run(
                ['python3', self.script_path],
                capture_output=True,
                text=True,
                timeout=300  # 5 minutos de timeout
            )
            
            if result.returncode == 0:
                logging.info("‚úÖ Conte√∫do gerado com sucesso!")
                logging.info(f"Output: {result.stdout}")
            else:
                logging.error(f"‚ùå Erro na gera√ß√£o: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logging.error("‚è∞ Timeout na gera√ß√£o de conte√∫do")
        except Exception as e:
            logging.error(f"üí• Erro inesperado: {e}")
    
    def cleanup_old_files(self):
        """Remove arquivos antigos para economizar espa√ßo"""
        try:
            # Remove arquivos com mais de 7 dias
            cutoff_time = time.time() - (7 * 24 * 60 * 60)
            
            for filename in os.listdir(self.content_dir):
                filepath = os.path.join(self.content_dir, filename)
                
                if os.path.isfile(filepath):
                    file_time = os.path.getmtime(filepath)
                    
                    if file_time < cutoff_time:
                        os.remove(filepath)
                        logging.info(f"üóëÔ∏è Arquivo removido: {filename}")
                        
        except Exception as e:
            logging.error(f"Erro na limpeza: {e}")
    
    def start_scheduler(self):
        """Inicia o agendador"""
        logging.info("üìÖ Iniciando agendador de automa√ß√£o...")
        
        # Agenda execu√ß√£o a cada 4 horas
        schedule.every(4).hours.do(self.run_content_generator)
        
        # Agenda limpeza di√°ria √†s 02:00
        schedule.every().day.at("02:00").do(self.cleanup_old_files)
        
        # Executa uma vez imediatamente
        self.run_content_generator()
        
        logging.info("‚è∞ Agendador configurado:")
        logging.info("  - Gera√ß√£o de conte√∫do: a cada 4 horas")
        logging.info("  - Limpeza de arquivos: diariamente √†s 02:00")
        
        # Loop principal
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # Verifica a cada minuto
                
            except KeyboardInterrupt:
                logging.info("üõë Agendador interrompido pelo usu√°rio")
                break
            except Exception as e:
                logging.error(f"Erro no agendador: {e}")
                time.sleep(60)

if __name__ == "__main__":
    scheduler = AutomationScheduler()
    scheduler.start_scheduler()
